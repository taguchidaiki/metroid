7.2

-----------------------------------------------------------------------------------------------
関数が持っているアドレスは、その関数の場所を示すアドレスではなくその実体（そのクラス内）からどれほどの
位置にあるかを示すオフセットの値が入っている
だから、グローバルに作られた場合の関数ポインタならばそのexeからのオフセットが自動で入れられるから
例：(*func)();でもしっかりと動いてくれる
ただし、階層を深くした場合即ちクラス内での関数ポインタを作ったとき、グローバルからのオフセットでは正しい
位置を示してくれない
だが、そいつのポインタは生成されてから割り振られるまでは不定の値をとってしまう
だから、そいつ自身のポインタ情報が入りますよというものを追加して関数ポインタに与えてあげて正しい位置を
伝えてあげないといけない
例：(this->*func)();	thisにそいつ自身のポインタの情報が入っている

※ちなみにthis->*func();でも通りそうであるがこれは、コンピュータ上ではthis->(*func())と読み取られて動かない
演算子の優先順位が原因(()が最強らしい)

------------------------------------------------------------------------------------------------
for文で配列の要素全てで回したいとき、変更を考慮に入れた書き方をするならば
MAXの値を知る方法としては配列の総サイズ数から配列の一つの要素数を割ってあげて出すとMAXの値が取得できる
max = sizeof(配列) / sizeof(配列の要素の一つ)
これで配列の型がcharだろうがintだろうが問題なくmaxの値が取れる

------------------------------------------------------------------------------------------------
ファイルが開けたらkeycondefに入れる
入れなかったらkeycondefの値を入れる

key.dat
fopen_s
fclose_s
fread
fwrite
