ソリューションの中に入っているプロジェクトを調べる
cocos2dxの相関図を書く

消したソリューション
libcocos2d

librecast

libSpine
spine = 2Dｱﾆﾒｰｼｮﾝ作成用のツール
ボーンを入れることで人体のような複雑な動きをさせることも可能

追っかけるコツ
1.動的デバックと静的デバックを組み合わせる
追い方によって動的か静的かを切り替える

delegate 委任する

・main.cpp内のAppDegate app;の中でシングルトンクラスのApplicationの初期化をしている（コンストラクタ）
・ApplicatoinのgetInstanceでrun()を呼ぶ

時間関係の処理を多くしていることから時間を結構気にしている感じ

retain()の中身でRefのカウンタを++している
Refはcocos2dxのクラスのほぼが継承している基底クラスである
このカウンタはスマートポインタの考え方に近く、この参照カウンタが0になったら解放される仕組み
ガベージコレクションの参照カウンタを採用している

release()の中身ではRefのカウンタを--している

drawScene()の内部のvisit()では、仮想関数化しているからdraw()が呼ばれるがrenderのaddCommandを使ってキューにスタックされて
描画している

HalloworldSceneを追っていくとUpdate()関数がない
HalloWorldSceneはSceneを継承しSceneはNodeを継承しNodeはRefを継承している


次にやってもらうこと
HalloWorldの顔をActionを使用して動かす
Actionの機能を調べておくこと
Action機能を使っていろいろやってきてもらうこと

マップの描画をエディターを使用して描画する
マップとプレイヤーの当たり判定をとる

コードの書き方
同じ関数が続いているときは、関数や引数の位置を合わせておくと間違いが発見しやすい
関数の機能説明は詳細をしっかり描くこと
ソリューションエクスプローラーにあるすべてのファイルを表示のチェックを外すことで追加→フォルダがフィルタに代わるので
cppが多くて見ずらくなってきたらこいつを使ってある程度種別に分けると見やすくなる
インクルードファイルもハードによって切り替えれるようにしたらいいと思う
関数の上にコメントを書くことで呼び出された関数にマウスを合わせることでそのコメントを読むことができる
ここで引数の中身の役割をコメントで書いておくと間違いが少なくなる
無意味な変数名は使わない
変数の単位がはっきりしていないとそいつがサイズなのかマップ数なのかなどわかりずらい
人が見て誤解しないようにコメントを打つこと
ラムダ式は＝以降が中身なのでその中身がわかりやすいようにかっこの位置は合わせる
英語の略は略称をしっかりとわかっておくこと
変数に関数の返り値を入れるときはその後の再利用性を使うことを見越してすること
for文の中で生成と破棄を行うと、コンパイラ次第では速度に影響が出る
必要以上にインクルードファイルをインクルードしない
変数の宣言にクラスをインクルードするのならclass ○○のように先行宣言をするのもあり
ヘッダーにusing namespaceを書くと影響が大きいから書くならcpp側に書いた方がいい
イベント系の登録は毎フレームするのは無駄がおおい
登録処理に関してはinit内でするほうがいい
変数宣言の種類は合わせて固めておいた方がわかりやすい
変数の初期化はコンストラクタがない以外ならヘッダーで初期化したほうがいい
mapは検索件数が多い場合は遅くなる
mapから取り出した情報を何度も使うならローカル変数に保持して使う方が効率がいい
関数名のつけ方は最初に動詞を持ってきた方が読みやすいのでは？

関数を呼び出すときと関数ポインタを呼び出すときとラムダを呼び出したときの速度の検証はしたほうがいい
何度もループをさせる処理なんかでどの書き方でも書けるのであれば、いろんな方法で速度差を検証すること
