6/11

c++ google style guide　と検索すると一般的な命名規則が出てくる
https://google.github.io/styleguide/cppguide.html
https://ttsuki.github.io/styleguide/cppguide.ja.html

C言語系などの名前の付け方
クラス名、構造体
--先頭を大文字にして記述	→	Player, Enemy
--単語の区切りを大文字		→	PlayerCH

変数名、実体
--先頭を小文字にして記述	→	PlayerCH playerCH


クラス内public
--上の記述と同じ		→	Pos pos

クラス内private
-_を使用していろいろ書いてる	→	Pos m_pos, _Pos, Pos_
なぜprivateだとこう書いているのか？
--privateなのでget,setが必要になる。そして、Pos posと書く人はだいたいgetPos,setPosのように書く
ただし、上の書き方をしている人はアクセスの関数をposと書く
こうすれば、getはPos pos(void),　setはvoid pos(Pos m_pos)とオーバーロードを使うことで同じ関数名でget,setが書ける

g_,gr_

define系
--全部大文字

enum系
--基本的にはクラス名などと同じだが、人によってはplayer _idと小文字で書いて_で宣言などする人もいる

Player,PlayerCH,playerCHなどの命名規則の名称はキャメル型	→	命名の仕方がラクダのこぶを彷彿とさせるから
player_id,m_pos,M_POSなどの命名規則の名称は   スネーク型	→	全部大文字、小文字で書いて_でつなぐ書き方　見た目が蛇みたいににょろにょろしてるから

頭文字が大文字　→　アッパー型
頭文字が小文字　→　アンダー型
上と下を合わせて名称を付けたりしている、頭文字が大文字で区切りで大文字ならアッパーキャメルなど

-------------------------------------------------------------------------------

#include の""と<>の違い
違いは探し始める場所！	場所が違うから検索の速度が変わってくる！

""は自分のいる場所から探し始める			自作のヘッダーをincludeするのに向いている
<>はあらかじめ設定してあるpathから探し始める		標準で装備しているヘッダーをincludeするのに向いている

-------------------------------------------------------------------------------

