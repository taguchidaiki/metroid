イベント参加時に心がけること
次に参加した時に前と全く同じだとダメ
今回のイベントから改善点をしっかりと洗い出してより良いものを作っていく人が技術者
イベントの振り返りをしっかりと行い、得たものをかみ砕くこと
これらの経験は自分の中だけで留めないで、自分たちの後ろの後輩たちに伝えていくこと

決められた期間の中でモノを作る場合、モノを仕上げるためにはどんなことでもすること
自分の技術に閉じこもらないこと
例
水の表現を作る場合、プログラマがシェーダーを書いて作ることもできるが、
unityを使う場合ならアセットを使用する方法もとれるし、デザイナーに作ってもらうこともできる
期間が短いならば、短い工数を優先して作り上げることも大事

白枝
久保山
赤崎
岡
田口
北川
尾崎
アレックス

説明的に前のチームと被っていると思ったら省いて別のところを発表してください（場の状況に応じて）

モジュール化の利点
モジュールの信頼度が高いのならばデバックの工数を大幅に減らすことができる

必要なもの
トリガー情報がちゃんととれているかどうか nowとoldの更新
これらの更新が毎フレームちゃんとできているかどうか
cocos2dの命令だと押したとき、離したときにしか取れないから
new,oldの情報を取ったとしても、更新がされていないことになる
それはよくないから、keystateのupdateの中で別途キーの情報を更新している
このやり方だと、キー情報の更新を制作者側でわかるところに置いてあるので確認がしやすい
入力のところをしっかりと仕上げておくこと

状態の重複が行われるときに、inとoutのチェックをしておかないとけったいな動き方をしてしまう
最初は動き（座標の移動）からつくっておいて、あとからアニメーションの制御を行った方が確認がやりやすい
制御の処理を行うならば一個一個丁寧にやること
例（単体テスト + 結合テスト）
左右移動の処理を作るならば、左右と地面にオブジェクトがある状態を作ってこのステージで左右移動の処理を
チェックすること
落ちる処理ならば、地面から離しただけの状態に持って行ってそこで落ちる処理をチェックする
そこまでやって、左右移動と落ちる処理を組み合わせた処理をチェックできるステージを作ってチェックする
ジャンプなら落下処理を気にしないで、ジャンプするだけの処理をチェックする

単体テスト→結合テストを行った後に、必ず単体テストを行うこと
単体でオッケーしたあと、結合でダメだった時、結合するために書き換えを行い結合でオッケーが出たとしても
そのあと、必ず単体テストを再度行うこと
修正をしたときにそれが単体のモジュールに影響を与えている可能性があるから、ここで単体テストを怠ると
また、バグが出る可能性がある
デバック保証が消えているものは必ずデバックを行うこと　

std::functionを使おう
functionに関数オブジェクトを登録することで汎用性の高いプログラムにできる
cocos2dxを使って作品を一本作ること
cocos2dxはサウンド周りが弱いから別のライブラリを使って音の導入をする
ゲーム性の指定はなし
　　　　　　　　　　　　　　　