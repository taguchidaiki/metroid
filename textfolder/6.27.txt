6.27

-------------------------------------------------------------------------
デバックをする際には、メモリ領域を追いかけることで最適なプログラムになっているか
確認することができる
そのほかにも、授業で勉強した方法以外でもできた場合、同じ動き方をしているようで、
内部では違う動き方をしている可能性もあるから注意すること

-------------------------------------------------------------------------
privateに_animKeyと_animFlameと_animCntを移動させる
そのためにget,setを作るが、Get○○、Set○○を作るとわざわざGet,Setを書くのはめんどくさいので
privateメンバの側には_をつけて、Get,Set側には_をはずしてメンバ名で関数を作る

Get側には返り値が状況次第では書き換わると困るので頭の返り値にconstをつける
あと、関数内の書き換えは不要なので関数終わりにconstをつける
Set側には引数の値が書き換わるのを防ぐために引数の先頭にconstをつける

-------------------------------------------------------------------------
条件式を書く際のわかりやすくするためのコツその１
条件式の範囲を見やすくするために<,>のどちらかを極端に使って見た目で範囲がわかる
ように書くやり方がある
他にも、キーとなる変数を左に合わせておく書き方もある
ただし、この書き方を重複させて書くと余計な混乱を起こす可能性があるから注意

-------------------------------------------------------------------------
変数のアドレスを見たい場合
知りたい変数で右クリックをしてウォッチの追加を押す
出てきたウィンドウの変数名をアドレス渡し(&)してあげるとアドレスを見ることができる

引数を参照で返したほうがいいのかコピーを渡したほうがいいのかというのは
状況によって変わってくる
参照をつける場合はその値が書き換わる可能性も考慮に入れてつくるべき
コピーを渡すならば別の値として書き換えを行えるという点がメリットになる

-------------------------------------------------------------------------
キーのチェック仕様作成
今回はステートパターンの変更版で作る
ベースシーン側にKeyStateクラスのポインタを作って、そいつを継承側で実体を作る
この実体の中にキーデータを格納できる配列の変数を作って(keyData[256])こいつを
Getできる関数もしくは先頭のポインタを渡す関数を作ってそれをObjのUpdateの引数に
渡す感じ

Updateでキー情報の取得をする
取得した情報はそれぞれの派生クラス側に持っておく
基底クラス側にそれぞれのstateから情報を獲得する
獲得した情報からplayerやenemyは動く

注意点
これは敵のAIにもつかえる
敵の内部にこのキーパッド情報を持たせてそれをUpdateで動かすことで自動で動くことができる

課題として提出するとき移動は左右上下
ボタン1~4はASZXを使用して提出すること
