レビューの指摘項目
{
	・""と<>を書き換える、外の人から見て自作なのか公式なのかがわかりずらいから
	同じ関数が続いているときは、関数や引数の位置を合わせておくと間違いが発見しやすい
	関数の機能説明は詳細をしっかり描くこと
	ソリューションエクスプローラーにあるすべてのファイルを表示のチェックを外すことで追加→フォルダがフィルタに代わるので
	cppが多くて見ずらくなってきたらこいつを使ってある程度種別に分けると見やすくなる
	インクルードファイルもハードによって切り替えれるようにしたらいいと思う
	関数の上にコメントを書くことで呼び出された関数にマウスを合わせることでそのコメントを読むことができる
	ここで引数の中身の役割をコメントで書いておくと間違いが少なくなる
	無意味な変数名は使わない
	変数の単位がはっきりしていないとそいつがサイズなのかマップ数なのかなどわかりずらい
	人が見て誤解しないようにコメントを打つこと
	ラムダ式は＝以降が中身なのでその中身がわかりやすいようにかっこの位置は合わせる
	英語の略は略称をしっかりとわかっておくこと
	変数に関数の返り値を入れるときはその後の再利用性を使うことを見越してすること
	for文の中で生成と破棄を行うと、コンパイラ次第では速度に影響が出る
	必要以上にインクルードファイルをインクルードしない
	変数の宣言にクラスをインクルードするのならclass ○○のように先行宣言をするのもあり
	ヘッダーにusing namespaceを書くと影響が大きいから書くならcpp側に書いた方がいい
	イベント系の登録は毎フレームするのは無駄がおおい
	登録処理に関してはinit内でするほうがいい
	変数宣言の種類は合わせて固めておいた方がわかりやすい
	変数の初期化はコンストラクタがない以外ならヘッダーで初期化したほうがいい
	mapは検索件数が多い場合は遅くなる
	mapから取り出した情報を何度も使うならローカル変数に保持して使う方が効率がいい
	関数名のつけ方は最初に動詞を持ってきた方が読みやすいのでは？
}

{
	自分の関数オブジェクトに必要な情報だけをセットしている
	functionに関数オブジェクトを登録する
	black white funcActMojuleを通り抜けたらrunactionしている

	プレイヤーから行動に使う情報をActionCtlの関数を使って登録する
	登録の中で、各々の関数オブジェクトを呼び出す
	動かしたい関数オブジェクトを呼び出す前にキー入力や背景との当たり判定やステータスのチェックを
	行ってそれを全部通ったらアクションを呼び出す

	モジュール化が終わったら、プレイヤーの変更などを外から変更できるようにすると
	のちのち、プランナーのひとに渡したときにやりやすくなる

	モジュール化の次は敵のジェネレートを行う
	プレイヤーが近づいてきたら敵をジェネレートするような処理を作る
}

後期の制作の提出は今月中に
{
	授業課題の範囲（メトロイド）
	提出日::12月6日
	提出場所::classAの課題１
	フォルダ名::学籍番号_名前

	win32,Androidで動作する
	地形をレイヤーで管理して表示
	プレイヤーのスプライトを表示して、地形に合わせた動きをする（モジュール化してある）
		・重力がある
		・左右移動、ジャンプが可能
	cricketを使用して、BGMとSEを動作させる
	effekseerを使用して、エフェクトを動作させる
	win32としてコンパイルできるもの
	win32の実行ファイル、ソースファイル、apkのセッティングファイルなどの提出
	
	もう一つの課題はcocos2dを使ったゲームの製作（条件::windows環境以外で動くゲームであること）
	個人、チームは問わないが、自分のやったところは必ず伝えること
}

みんなのコードレビュー
{
	生成する場所は、そいつを利用する近くで生成するとよい
	離れていると、利用するまでに何か変更があったときにそいつが書き換わる可能性がある
	std::list<std::function<>>に関数オブジェクト（hitcheckやchecklist）を入れている

	配列（使う場合）の個数が全部enum classのMAX値をつかうならstructでまとめた方が管理がしやすい

	みんな	actctlはそれぞれポインタで実体を作ってるっぽい

	二重のfor文を抜けるならラムダを使うと返り値から抜けることができる
	変にフラグを増やす必要性がなくなる

	ラムダ式も関数ポインタであるから、書こうと思えば関数ポインタで参照先を切り替える
	ような書き方にできるが、そこにラムダ式を使うメリットを考える必要がある

	忘れがちだが、自身でnewをしたものはデリーターをしっかり書くこと

	関数オブジェクトのヘッダーのインクルード用のヘッダーを作ると、
	モジュール化したものをインクルードする際にすべてのモジュールのヘッダーを書く必要がなくなる

	ステータスやプログラムの終わりと始まりの部分は大事！
	インスタンスしたら必ずデリートすることだったり、ステータスのジャンプと着地の処理だったり

	変数　＝　ラムダ式[&](){
		for文（）
		{
			条件に引っかかったらfalse
		}
		すべてを抜けたらtrue
	}

	for文
	{
		if(上のラムダ式)
		{
			アクション？
		}
	}
}

今後の追加予定
{
	cocos2dでのサウンド周り
		使用するライブラリやツール
			[cricket]
	演出、パーティクル周り
		使用するライブラリやツール
			[Effekseer]
		
この辺の追加予定の日にちは今週までしか時間は取らない	
}

cricketでつまずくであろうこと
{
	起動させるときに何かを入れないと動かない
}

effekseer
{
	effekseerといっても色々ある
	cocos2dxだったりDirectXだったり
	
}