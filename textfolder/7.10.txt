7.10

vectorを使った追加、削除処理
eraseは範囲を指定して消せるeraseもある

algorithmの特定の命令を使うことでvectorの条件を満たす要素を下に
それ以外は上に再配置することができる

remove_if(開始位置、終了位置、プレディケート（真偽のあるもの真で下に移動する）);
戻り値::有効な要素の末尾の次を指すイテレータ

remove(開始位置、終了位置、数値::比べるもの);
そうすることでeraseの範囲削除で一気に削除できるから早い

--------------------------------------------------------------------------------
無名関数(ラムダ式)

書き方
[](){};
もしくは[]{};(省略形)

()は引数部
{}は関数の処理内容(今回はこの中でreturn isAlive()を返す)
[]はキャプチャ部

std::remove_if(開始位置,終了位置,[](shared_Obj& obj){return !(*obj).isAlive());

ラムダ式の処理部には上のように一行だけではなくても大丈夫

------------------------------------------------------------------------------
敵が乱数で1200分の1の確率で敵が消滅するようにする

------------------------------------------------------------------------------
今度は_deathという状態を作って爆発の演出をつくる
_aliveがfalseで_deathがfalseの時は存在してはいないがまだ消してはいけない
消えていない間は爆発のアニメーションを行う
_deathがtrueになったらここでvectorからの削除を行う