7.3

制作時はテストが楽な順番にする方法もある
作業を後回しにしたいときはコメントアウトで処理内容を書いてコメント位置をずらすと
どこを後回ししているのかわかる

-------------------------------------------------------------------------------
fileについて
std::vectorをfileに保存、読み込みをしようとするときにそのままvectorの変数を書いてあげると
そいつはデータへのポインタ情報しかもっていないから、再度読み込みをしようとするとデータがふっ飛んでいる
だから、vectorのデータを保存しようとするならvectorの中にdata()という関数があるからこれを利用する

容量と要素数はイコールではない
fileで注意することはreadする際に要素のサイズを間違えないようにすること
これを間違えるとゲームは起動しても終わったときにサイズ違いでメモリが吹っ飛ぶ

-------------------------------------------------------------------------------
const はコンストラクタが走った段階で効き始めるからconst付きの変数を初期化するときは
コンストラクタが走る前に初期化してあげると大丈夫

-------------------------------------------------------------------------------
最終的な描画の統括はSceneMngが行うようになる
仕様
  SceneMng			  GameScene	GameScreenをもっている
AddQue();
 Draw()を呼び出す		 Draw()(GameSceneが持っている)
{				{
 ClsDrawScreen()		 GameScreenの中に描画する

 QueをDrawGraphでDrawする  ←	 AddQue(GameScreen);GameScreenをSceneMngの描画用のQueに入れる
				 
 ScreenFlip();			}
}


デバック側も似たようなスクリーンを作って描画する形に変更する

キューに必要なもの
グラフィックハンドル（int）
座標（Vector2）

要素として必要なものが３つ以上あるから今回はタプルも合わせて使用する
タプルの中には要素の取得をする関数がないから、要素の取得をする際はstd::getをつかう
std::get<番号>(タプルの変数)

-------------------------------------------------------------------------------
課題
デバック機能の実装
クラス名は_DebugGraph.h
シングルトンで勝手に作られて勝手に死ぬ
デバック時のみ実体が作られる
スクリーンに対する描画を行う
機能
通常の描画
DrawGraph
DrawLine
DrawBox
DrawPixel
DrawCircle
DrawString
DrawFormatString
_dbgを関数名の前に作る

				