6/10

オペレーターのオーバーロードの単項演算子で自分自身を返す理由（返さなくても参照で値を変えてるなら返さなくてもよくない？説）
--返り値に計算した結果の値を返すことで値の書き換えを行うとともにその結果を条件式などに組み込むことができる
--すなわち、使用する際の拡張性を上げるために返り値に自分自身を返しているのである
（＊仕組み上、返り値がない場合でも成り立ちはする）

----------------------------------------------------------------------------------

クラスの外に書く場合、そのクラスの構造は利用するが内容は使わない感じ

クラス外のオペレーターのオーバーロードで引数付きコンストラクタを使用した際、参照、ポインタを返さないこと！
--参照は使われた瞬間の実体は保証されるが処理がオペレータの関数内を抜けた際、関数内で生成したローカルの変数は関数を抜けたことで
寿命を迎えデリートもしくはデストラクタが呼ばれ削除される
そこを参照で見たら消されてるから値がないもしくは、たまたま全く違う値が入っていることがあるからあぶないので参照、ポインタで返してはいけない

プログラムを書く際はスコープの範囲をしっかり確認して参照を使うかコピーを使うか決めること
例：上の通り関数内で宣言したものを返すならば参照はアウト
　：参照で値を書き換えているならばリターンしたあともデストラクタは呼ばれないから参照でもオッケー
----------------------------------------------------------------------------------

