cocos2dx気になった命令群

何度もリピートする
RepeatForever()

定期的にupdateを呼び出す関数
schejuleupdate()

何度も再生
Repeat()

createwithtwoactions()

callfunc()

次にやりたいこと
入力周りのことをcocos2dxでやっていく
キー入力があったときに画像を動かす処理をすること
やってほしいこと
キー入力とアンドロイドのタッチをいっしょに実装すること

共通のフォーマットに収めるための方法がそれぞれ違う
入力装置から取り出した情報でアクションを起こす
それぞれのデバイスから取り出した情報から共通の行動を起こす
ステートパターンを使用する

ソースファイルを追加するとき、プラットフォーム系のやつ（win32など）はそれぞれ対応したフォルダに
共通のものはフォルダでclassesのなかに分ける

cocosのクラスを使うとき、USING_NS_CCを使うか名前空間をしっかり書くこと


タッチやキーの操作にかんする方法
CC_CALLBACK()関数を使う方法
CALLBACK()を使う場合、登録削除が何度も行われる場合は○
ただし、その分クラスのメンバが増えるからその辺はケースバイケース

ラムダ式を使う方法
ラムダ式で対応した入力関数を使う
その最後にgetEventDispatcher()->addEventListenerWithSceneGraphPriority()関数を使って、イベントの登録を行う


タッチ操作の概念
操作するときは指はあまり動かないから、その動きからどれだけ期待した動きができるようになるかを考える
操作を十字キーとして扱うか、アナログスティックとして扱うかによって求められるものが変わる
最初にとれる情報は取れるだけ取っておくこと
情報は、渡すごとに劣化（そぎ落とされていく）していくから

アナログスティックで必要なものとして、一気にスティックを倒したか、ゆっくり倒したかなどがある
（マリオや、FPSのシューティングなど）
それぞれに歩きや走りなどの動きなどをつけたり、動きの緩急をつけるため

操作に関しては最終的な提出までにいろいろいじって試してみること
目標は、どれだけプレイにストレスなく集中できるかどうか

指定された画像に差し替える
キー入力に合わせてアニメーションを切り替える
アニメーションを行う

キャラクターの表示
ステートに合わせた画像の切り替え
アニメーション

どのタイミングでインスタンスされ、どのタイミングで破棄されるのかを意識して作ること

stopAllAction()でアニメーションを一度止めて新しいｱﾆﾒｰｼｮﾝを登録している
今ネットの情報にはほぼほぼ日本語では最新の情報は見つけずらい
cocos2dxの場合は古いデータにはクラス名にCCがついている情報は古い
そういうのは、ちゃんとクラス自身に書いてあるが言語が別だから調べないで見逃しているパターンもよくある

アニメーションの整理
cocos2dxに任せられる仕組みをすべて任せていく仕様に変更
listやvectorに任せて動かしていく形を変更
playerクラスの作成 -> cocos2d::spriteクラスを継承
playerのupdate内で移動、ｱﾆﾒｰｼｮﾝの制御を行う
作ったものをシーンにアタッチすることで勝手に動く
デバックコンソールの出力

#defineで書かれたものはデバックでは中には入れない
クラスの生成に関して
cocos2dxにおける生成と今までのやり方による生成ではどこかで差分が生まれていて、その差分がどれほど
動きに影響を与えているのか考える必要がある

これからやること
モジュール化
必要なものをアタッチしていって動かせるようにする
構造化のプログラミング
１モジュールにつき複雑な処理は入れない（入力処理の中に当たり判定処理を入れるなど）


ラムダ式と関数の違い
ラムダ式::キャプチャ部
関数::キャプチャ部がない
キャプチャ部がなければ関数と変わらないから、関数ポインタにラムダ式を入れようと思ったらキャプチャ部を
使わなければいける（逆にキャプチャ部が使えないともいえる）

DIR begin(DIR);

DIR end(DIR);

DIR operator*(DIR);

DIR operator++(DIR);