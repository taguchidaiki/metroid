6.20

みんな大好きconst講座
constにも色々な付け方がある
const Vector2 & const divSize
前にconstを付けた場合	(型の中身にconstがかかる)	
Vector2の参照先にconstがかかるから 
vec.x = 5; vec.y = 2は参照先に制限がかかっているから書き換えられない
vec = {5,2};はvec = Vector2(5,2)のように実体を作ってvecのアドレスを書き換えることができちゃう

変数の前にconstを付けた場合	(アドレスにconstがかかる)
これはアドレスに対するconstなので、本来ならばvec = {5,2}がはじかれるがこのvecはクラスなので
vecの先のx,yもアドレスになっているからはじかれずに通っちゃう
これがintならば、アドレスの書き換えとしてはじかれることになる

両方にconstを付けた場合
Vector2というクラスならばアドレス書き換えのみ通る
intであれば両方とも通らない

関数の後ろにもconstがつけられる
VecInt GetID()const;
関数の内部での変更をはじく
これは関数の中身をReadOnlyにするので
その中身を書き換えられないようにするためにつける

--------------------------------------------------------------------------
デバックモードの作成
注意::デバック用でスタートアップの関数int WINAPI ......をint main()に書き換えると最初が違うからそれはデバックとして違うよね

今回はデバック用のクラスを作ります
存在することに意識を向けたくないので
勝手に生成されて勝手に消滅し、かつ一つしか存在しない::シングルトン
まず、クラス自体を#ifdef _DEBUG ~ #endifで覆う
次にシングルトン化
ここで、デリートをするためにスマートポインタを使うorz
今回使うのはuniqe_ptr

1.まず、<memory>をインクルード

2.private に　static std::unique_ptr<(管理したい型名)> 変数名　を書く
今回は static std::unique_ptr<_DebugConOut> s_Instance;
こいつは管理用のスマートポインタで作っても実体は作られないので実体の作り忘れに注意

3.cpp側に同じく実体を作成
実体の作り方は std::unique_ptr<_DebugConOut> _DebugConOut::s_Instance(new 管理したい型名);
ここで、()の中に管理用の実体を書くことでそいつの実体が生成される

4.ヘッダ側にあるGetInstance()の中身でreturn (*s_Instance)を返す

5.デストラクタをprivateに移す

6.デフォルトデリータではないデリータを作成する
これの作り方は色々あるが、今回は関数ポインタによる作り方を勉強する
まず、private空間にデリート用の構造体を作る
この中で関数呼び出しのオペレーター()のオーバーロードを行う
void operator()(_DebugConOut* debugConOut){ delete debugConOut;}

7.宣言、実体の生成側にこのDebugConOutDeleterの設定を行う
宣言
static std::unique_ptr<_DebugConOut, _DebugConOutDeleter> s_Instance;
実体の生成
std::unique_ptr<_DebugConOut, _DebugConOut::_DebugConOutDeleter> _DebugConOut::s_Instance(new _DebugConOut);

シングルトンにも色々な種類がある
イメージマネージャーのようなシングルトンは簡単に作れるし、任意で消せる動的なシングルトン
デバックコンアウトのようなシングルトンは勝手に作られて勝手には消されない静的なシングルトン
用途によってさまざまな種類のシングルトンがあってその用途に合うやつを作るといい

#ifdef ()
#endif //
タグ ifndef _DEBUG
-------------------------------------------------------------------------
スマートポインターとはどういうものか
シングルトンを作るとき、自分自身の実体を管理しているのは自分自身でやっていたが
スマートポインターではその実体をスマートポインタに管理させる

実体を作るときはクラスならnewを、変数なら大丈夫
ちなみに、作り方はいっぱいあるが今回はその一つを勉強する


そして、スマートポインタ自身が消滅したらそいつが管理している奴らの/*デフォルト*/のデストラクタを
呼んで勝手に削除してくれる
逆を言うと、指定してさえ上げれば任意のデリーターを呼ぶことも可能である
カンマを書くことで指定先のデリーターに変更可能

-------------------------------------------------------------------------
ゲームのシーン管理
今回の管理
BaseScene →(継承)　GameScene
各シーンを管理するポインタ変数を一つ用意する

ユニークポインターを渡して、ユニークポインターを返す形にする
シーンの切り替わりがなかったときは自分自身のシーンのポインターを返して、シーンが切り替わった
時は、切り替わったシーンへのポインターを返り値として返す



